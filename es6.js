/** 1. class ... 2.extends ...3.consrtuctor... 4.super  */

/*Например, раньше для создание компонента в реакте использовалась конструкция */
var Content = React.createClass({
    getInitialState: function () {
        return{
            text: 'some text'
        }
    }
})

/*В Ес6 при создании компонента с посощью реакта использовали: */
class Content extends React.Component{
    constructor(){
        super();
        this.state ={ ... }
    }
};

/* На этом примере создали класс Content, который наследует свойства из компонента реакта (React.Component)
и внутри него создали объект состояния, и т.к. использовали this, понадобился super();
 */

/* 1 сlass - не может быть вызван до объявления, как это возможно просто при объявлении функции*/
/* 2 extends - используется для наследования */
/* 3 constructor - используется для создания объекстов, внутри класса */
/* 4 super() - просто должен быть использован до использования this, т.к инициализирует его   */

/**5. import ... 6.export */
/* 5 import позволяет производить импорт   */
/* Было */
var React = require('react')
/* стало*/
import React from 'React'
import {React , noReact} from 'module' /*когда несколько частей кода из одного файла имортировать нужно*/
import './style.css' /* просто целиком файл импортировать*/


/* 6. export позволет экспортировать переменные в другие части программы (модуля)*/
/*Было*/
module.exports = Content;
/*Стало*/
export default Content;


/** 7. .bind(this)*/
/* используется, чтобы не потерять контекст this, создаёт новую функцию
которая вне зависимости от способа вызова использует определённое значение this.
      (можно передать и какие-то аргументы дополнительно)*/
this.SearchInputChange.bind(this)

/** 8. Стрелочная функция () => {}  */
/*Стрелочная функция на смену анонимной функции(не записывается в переменную)
. + внутри неё не теряется контекст для this*/
/*Было (до функции создавали переменную, куда записывали значение this, и уже
эта новая переменная передавалась в функцию*/

let _this = this;
API.getVideos().then(function (ourdata) {
    console.log(ourdata);
    _this.setState = ({
        videos: ourdata
    })
})
/*Стало*/
API.getVideos().then( (ourdata) => {
    console.log(ourdata);
    this.setState = ({
        videos: ourdata
    })
})

/** 9. var - 10.let */
/* облать видимости другая. var - делало переменную глобальной, let нет.*/
/* let только внутри функции */
let x = 2+2;

/*  var если будет внутри функции можно использовать в других частях программы*/
var y = 2+2;

/** 11. const */
/* просто постоянная переменная.*/
const c = 10 ; /*теперь нельзя менять*/

/** 12. Появились встроенные промисы  */
return new Promise(function (resolve, reject) {

})

/**13. fetch */
fetch('https://api.github.com/search/repositories?q=react')
    .then(function(response) {
        console.log(data.data.items);
    })
/*раньше использовался XMLHttpRequest*/

/** 14. { video }*/
/* когда в объекте ключ совпадает со значение можно использовать 1 слово, вместо двух*/

x = {
    video: 'video'
}

/*можно теперь :*/
x ={ video}

/** 15. Экспорт функции*/
export function getVideos() {
}

/** 16. Внутри входящих параметров функции можно передать целый объект*/
export default (store = {
    videos_list: [],
    loading: false
}, action) => {};

/**17. ...спрэды */
/*В новый объект переносятся старые свойства*/
...someNewObject /*запись о том, что это новый объект и в него переносятся старые свойства*/

/**18. Декоратор, уже 7-й ес*/
/*Позволяет на ходу модифицировать полученные в аргументе функции объект*/
@connect((store) => {
    return{
        videos: store.videos
    }
})

